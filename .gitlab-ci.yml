stages:
- test_and_build
- tag

variables:
  GIT_STRATEGY: "clone"

job-build:
  stage: test_and_build
  tags:
    - docker
    - linux
  script:
    # upload process is managed by GitHub Actions;
    # here we only need to check that project has no build errors.
    - docker build --no-cache . -t mdocker
    - docker run --rm -i mdocker /bin/sh -c "python3 -m poetry build"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: manual

job-tag:
  stage: tag
  needs:
    - job-build
  script:
    - USERNAME=$CUSTOM_CI_USERNAME
    - PASSWD=$CUSTOM_CI_PASSWD
    - TAGNAME=$(python3 scripts/get_version.py)
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git remote remove origin
    - git remote add origin https://$USERNAME:$PASSWD@gitlab.com/$CI_PROJECT_PATH
    - if [ $(git tag | grep "$TAGNAME") ]; then echo "[ * ] Tag already exists, skipping.."; else git tag $TAGNAME && git push origin $TAGNAME; fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
